# Tokens
NUMBER = 'NUMBER'
PLUS   = 'PLUS'
MINUS  = 'MINUS'
EOF    = 'EOF'

class Tokenizer
    def initialize(text)
      @text = text
      @pos = 0
    end
    
    def get_next_token
      return [EOF, nil] if @pos >= @text.length
      
      char = @text[@pos]
      
      if char =~ /\d/
        num_value = ''
        while char =~ /\d/
          num_value += char
          @pos += 1
          char = @text[@pos]
        end
        return [NUMBER, num_value.to_i]
      elsif char == '+'
        @pos += 1
        return [PLUS, char]
      elsif char == '-'
        @pos += 1
        return [MINUS, char]
      else
        @pos += 1
        return get_next_token
      end
    end
  end  

  class ASTNode
    attr_accessor :value, :left, :right
    def initialize(value, left = nil, right = nil)
      @value = value
      @left = left
      @right = right
    end
  end
  
  class Parser
    def initialize(tokenizer)
      @tokenizer = tokenizer
      @current_token = @tokenizer.get_next_token
    end
    
    def eat(token_type)
      if @current_token[0] == token_type
        @current_token = @tokenizer.get_next_token
      else
        raise "Invalid token"
      end
    end
    
    def parse
      node = ASTNode.new(@current_token[1])
      eat(NUMBER)
      
      while @current_token[0] != EOF
        if @current_token[0] == PLUS
          eat(PLUS)
          node = ASTNode.new('+', node, ASTNode.new(@current_token[1]))
          eat(NUMBER)
        elsif @current_token[0] == MINUS
          eat(MINUS)
          node = ASTNode.new('-', node, ASTNode.new(@current_token[1]))
          eat(NUMBER)
        else
          raise "Invalid token"
        end
      end
      
      node
    end
  end
  
  class CodeGen
    def initialize(ast)
      @ast = ast
    end
    
    def generate
      visit(@ast)
    end
    
    def visit(node)
      case node.value
      when '+'
        ['ADD', visit(node.left), visit(node.right)]
      when '-'
        ['SUB', visit(node.left), visit(node.right)]
      else
        node.value
      end
    end
  end
  

  def run_bytecode(bytecode)
    if bytecode.is_a?(Array)
      operator = bytecode[0]
      operands = bytecode[1..-1].map { |operand| run_bytecode(operand) }
  
      case operator
      when 'ADD'
        return operands[0] + operands[1]
      when 'SUB'
        return operands[0] - operands[1]
      else
        raise "Unknown operator: #{operator}"
      end
    else
      return bytecode # Assume it's a number
    end
  end
def main
    # Get input from user
    print "Enter expression: "
    text = gets.chomp
  
    # Tokenize
    tokenizer = Tokenizer.new(text)
    
    # Parse
    parser = Parser.new(tokenizer)
    ast = parser.parse
    
    # Generate Code
    codegen = CodeGen.new(ast)
    bytecode = codegen.generate
    
    # Display Bytecode
    puts "Generated bytecode: #{bytecode}"
  
    # Run Bytecode
    result = run_bytecode(bytecode)
  
    # Display Result
    puts "Result: #{result}"
  end
  
  main